#include<bits/stdc++.h>
using namespace std;
#define MAX_N 100010 // second approach: O(n log n)
typedef long long ll;
char T[MAX_N]; // the input string, up to 100K characters
ll n; // the length of input string
ll RA[MAX_N], tempRA[MAX_N]; // rank array and temporary rank array
ll SA[MAX_N], tempSA[MAX_N]; // suffix array and temporary suffix array
ll c[MAX_N]; // for counting/radix sort
ll Phi[MAX_N];
ll PLCP[MAX_N];
ll LCP[MAX_N];
#define inf 1000000010000
#define mod1 1000000007
struct te
{
    ll pos,val;
} tree[100010*3];
void merge(ll node)
{
    tree[node].val=min(tree[2*node].val,tree[2*node+1].val);
    tree[node].pos=max(tree[2*node].pos,tree[2*node+1].pos);
}
void init(ll node,ll l,ll r)
{
    if(l==r)
    {
        tree[node].val=LCP[l-1];
        tree[node].pos=SA[l-1];
        //cout<<tree[node].val<<" "<<tree[node].pos<<"-->";
        return;
    }
    init(2*node,l,(l+r)/2);
    init(2*node+1,(l+r)/2+1,r);
    merge(node);
}
ll query(ll node,ll l,ll r,ll p,ll q)
{
    if(r<p||q<l)
        return inf;
    if(l>=p&&r<=q)
    {

        return tree[node].val;
    }
    return min(query(2*node,l,(l+r)/2,p,q),
               query(2*node+1,(l+r)/2+1,r,p,q));
}
ll query1(ll node,ll l,ll r,ll p,ll q)
{
    if(r<p||q<l)
        return -inf;
    if(l>=p&&r<=q)
    {

        return tree[node].pos;
    }
    return max(query1(2*node,l,(l+r)/2,p,q),
               query1(2*node+1,(l+r)/2+1,r,p,q));
}
void countingSort(ll k)   // O(n)
{
    ll i, sum, maxi = max((ll)300, n); // up to 255 ASCII chars or length of n
    memset(c, 0, sizeof c); // clear frequency table
    for (i = 0; i < n; i++) // count the frequency of each lleger rank
        c[i + k < n ? RA[i + k] : 0]++;
    for (i = sum = 0; i < maxi; i++)
    {
        ll t = c[i];
        c[i] = sum;
        sum += t;
    }
    for (i = 0; i < n; i++) // shuffle the suffix array if necessary
        tempSA[c[SA[i]+k < n ? RA[SA[i]+k] : 0]++] = SA[i];
    for (i = 0; i < n; i++) // update the suffix array SA
        SA[i] = tempSA[i];
}
void constructSA()   // this version can go up to 100000 characters
{
    ll i, k, r;
    for (i = 0; i < n; i++)
        RA[i] = T[i]; // initial rankings
    for (i = 0; i < n; i++)
        SA[i] = i; // initial SA: {0, 1, 2, ..., n-1}
    for (k = 1; k < n; k <<= 1)   // repeat sorting process log n times
    {
        countingSort(k); // actually radix sort: sort based on the second item
        countingSort(0); // then (stable) sort based on the first item
        tempRA[SA[0]] = r = 0; // re-ranking; start from rank r = 0
        for (i = 1; i < n; i++) // compare adjacent suffixes
            tempRA[SA[i]] = // if same pair => same rank r; otherwise, increase r
                (RA[SA[i]] == RA[SA[i-1]] && RA[SA[i]+k] == RA[SA[i-1]+k]) ? r : ++r;
        for (i = 0; i < n; i++) // update the rank array RA
            RA[i] = tempRA[i];
        if (RA[SA[n-1]] == n-1)
            break; // nice optimization trick
    }
}
void computeLCP()
{
    ll i, L;
    Phi[SA[0]] = -1; // default value
    for (i = 1; i < n; i++) // compute Phi in O(n)
        Phi[SA[i]] = SA[i-1]; // remember which suffix is behind this suffix
    for (i = L = 0; i < n; i++)   // compute Permuted LCP in O(n)
    {
        if (Phi[i] == -1)
        {
            PLCP[i] = 0;    // special case
            continue;
        }
        while (T[i + L] == T[Phi[i] + L])
            L++; // L increased max n times
        PLCP[i] = L;
        L = max(L-1, (ll)0); // L decreased max n times
    }
    for (i = 0; i < n; i++) // compute LCP in O(n)
        LCP[i] = PLCP[SA[i]]; // put the permuted LCP to the correct position
}

int main()
{
    ll k;
    while(cin>>k)
    {
        if(!k)
            return 0;
        getchar();
        n = (ll)strlen(gets(T)); // input T as per normal, without the ‘$’
        if(k==1)
        {
            cout<<n<<" "<<0<<endl;
            continue;
        }
        T[n++] = '$'; // add terminating character
        constructSA();
        computeLCP();
        // cout<<n<<endl;
        //n++;
        init(1,1,n);
        // cout<<endl;
        ll maxi=-1;
        ll pos=0;
        for(ll i=1; i+k-1<=n; i++)
        {
            ll temp=query(1,1,n,i+1,i+k-1);
            ll st=query1(1,1,n,i,i+k-1);
            if(maxi<temp)
            {
                maxi=temp;
                pos=st;
            }
            else if(maxi==temp)
            {
                pos=max(pos,st);
            }
        }
        if(maxi==0)
        {
            cout<<"none"<<endl;
        }
        else
            cout<<maxi<<" "<<pos<<endl;
    }
}
